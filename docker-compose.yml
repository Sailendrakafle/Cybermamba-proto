name: echomon-proto

services:
  db:
    container_name: echomon-proto-db
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_PASSWORD=echomon
      - POSTGRES_USER=echomon
      - POSTGRES_DB=echomon_db
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - echomon-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "echomon"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    container_name: echomon-proto-backend
    build: 
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
    restart: always
    depends_on:
      - db
    environment:
      - DJANGO_ENV=production
      - SECRET_KEY=changeme-in-production
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - NETWORK_RANGE=172.18.0.0/16
      - DB_NAME=echomon_db
      - DB_USER=echomon
      - DB_PASSWORD=echomon
      - DB_HOST=db
      - DB_PORT=5432
      - CORS_ORIGINS=http://localhost:3000
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    networks:
      - echomon-network
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"

  frontend:
    container_name: echomon-proto-frontend
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile
    restart: always
    depends_on:
      - backend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - echomon-network

networks:
  echomon-network:
    driver: bridge

volumes:
  postgres_data:
  static_volume:
  media_volume: